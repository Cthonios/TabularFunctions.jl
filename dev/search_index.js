var documenterSearchIndex = {"docs":
[{"location":"#TabularFunctions.jl","page":"TabularFunctions","title":"TabularFunctions.jl","text":"","category":"section"},{"location":"#Description","page":"TabularFunctions","title":"Description","text":"","category":"section"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"This is a small package to help define julia functions via either tabular data, e.g. (x, y) pairs, or tables of functions to aid in simply writing piecewise analytic functions.","category":"page"},{"location":"#Installation","page":"TabularFunctions","title":"Installation","text":"","category":"section"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"Currently TabularFunctions.jl has not been registered. To install, one can do the following in the package manager","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"pkg> add https://github.com/Cthonios/TabularFunctions.jl/","category":"page"},{"location":"#Future-installation-instructions","page":"TabularFunctions","title":"Future installation instructions","text":"","category":"section"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"From the package manager simply type","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"pkg> add TabularFunctions","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"Or from the REPL","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"julia> using Pkg\njulia> Pkg.add(\"TabularFunctions\") ","category":"page"},{"location":"#Examples","page":"TabularFunctions","title":"Examples","text":"","category":"section"},{"location":"#PiecewiseAnalyticFunction","page":"TabularFunctions","title":"PiecewiseAnalyticFunction","text":"","category":"section"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"Suppose we like to define a piecewise analytic function such that $ f(x) = \\begin{cases} x, & \\text{if } x < 1 \\\nx^2, & \\text{if } x \\ge 1 \\end{cases} $","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"then we can use the maco @piecewise_analytic to define the above function as follows","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"using TabularFunctions\nfunc = @piecewise_analytic begin\n    0.0, x -> x\n    1.0, x -> x^2\nend;\nnothing\n# output\n","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"and this can be used like a regular julia function as follows","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 0.5\ny = func(x)\n\n# output\n0.5","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 1.5\ny = func(x)\n\n# output\n2.25","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"Note that closures are not necessary in the macro definition. The following is also valid syntax for the @piecewise_analytic macro","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"using TabularFunctions\nfunc = @piecewise_analytic begin\n    0.0, sin\n    1.0, cos\nend\nnothing","category":"page"},{"location":"#PiecewiseLinearFunction","page":"TabularFunctions","title":"PiecewiseLinearFunction","text":"","category":"section"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"If instead you need to define a function simply from sparse tabular data, you can use the @piecewise_linear macro. This creates a simple function that will exactly reproduce values at the supplied points and linearly interpolate when provided with values between those points. If the provided input lies outside the bounds, the lower or upper bound is returned respectively. An example of a triangle wave is shown below","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"using TabularFunctions\nfunc = @piecewise_linear begin\n    0.0, 0.0\n    0.5, 1.0\n    1.0, 0.0\nend\nnothing\n\n# output\n","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = -1.0\ny = func(x)\n# output\n0.0","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 0.0\ny = func(x)\n# output\n0.0","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 0.25\ny = func(x)\n# output\n0.5","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 0.5\ny = func(x)\n# output\n1.0","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 0.75\ny = func(x)\n# output\n0.5","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 1.0\ny = func(x)\n# output\n0.0","category":"page"},{"location":"","page":"TabularFunctions","title":"TabularFunctions","text":"x = 2.0\ny = func(x)\n# output\n0.0","category":"page"},{"location":"#Reference","page":"TabularFunctions","title":"Reference","text":"","category":"section"},{"location":"#TabularFunctions.AbstractTabularFunction","page":"TabularFunctions","title":"TabularFunctions.AbstractTabularFunction","text":"abstract type AbstractTabularFunction{V<:(AbstractVector{<:Number})}\n\n\n\n\n\n","category":"type"},{"location":"#TabularFunctions.PiecewiseAnalyticFunction","page":"TabularFunctions","title":"TabularFunctions.PiecewiseAnalyticFunction","text":"struct PiecewiseAnalyticFunction{V<:(AbstractVector{<:Number}), Funcs} <: TabularFunctions.AbstractTabularFunction{V<:(AbstractVector{<:Number})}\n\nx_vals::AbstractVector{<:Number}\nfuncs::Any\n\n\n\n\n\n","category":"type"},{"location":"#TabularFunctions.PiecewiseAnalyticFunction-Union{Tuple{Funcs}, Tuple{V1}, Tuple{T}} where {T<:Number, V1<:AbstractVector{T}, Funcs}","page":"TabularFunctions","title":"TabularFunctions.PiecewiseAnalyticFunction","text":"\n\n\n\n","category":"method"},{"location":"#TabularFunctions.PiecewiseAnalyticFunction-Union{Tuple{Funcs}, Tuple{V}, Tuple{V, Funcs}} where {V<:(AbstractVector{<:Number}), Funcs<:(AbstractVector)}","page":"TabularFunctions","title":"TabularFunctions.PiecewiseAnalyticFunction","text":"PiecewiseAnalyticFunction(\n    xs::AbstractVector{<:Number},\n    funcs::AbstractVector\n) -> PiecewiseAnalyticFunction{V, Funcs} where {V<:(AbstractVector{<:Number}), Funcs<:NamedTuple}\n\n\n\n\n\n\n","category":"method"},{"location":"#TabularFunctions.PiecewiseLinearFunction","page":"TabularFunctions","title":"TabularFunctions.PiecewiseLinearFunction","text":"struct PiecewiseLinearFunction{V1<:(AbstractVector{<:Number}), V2<:(AbstractVector{<:Number})} <: TabularFunctions.AbstractTabularFunction{V1<:(AbstractVector{<:Number})}\n\nx_vals::AbstractVector{<:Number}\ny_vals::AbstractVector{<:Number}\n\n\n\n\n\n","category":"type"},{"location":"#TabularFunctions.PiecewiseLinearFunction-Union{Tuple{V2}, Tuple{V1}, Tuple{T}} where {T<:Number, V1<:AbstractVector{T}, V2}","page":"TabularFunctions","title":"TabularFunctions.PiecewiseLinearFunction","text":"\n\n\n\n","category":"method"},{"location":"#TabularFunctions.XsNotMonotonicallyIncreasing","page":"TabularFunctions","title":"TabularFunctions.XsNotMonotonicallyIncreasing","text":"struct XsNotMonotonicallyIncreasing <: Exception\n\n\n\n\n\n","category":"type"},{"location":"#Adapt.adapt_structure-Tuple{Any, PiecewiseAnalyticFunction}","page":"TabularFunctions","title":"Adapt.adapt_structure","text":"adapt_structure(\n    to,\n    func::PiecewiseAnalyticFunction\n) -> PiecewiseAnalyticFunction\n\n\n\n\n\n\n","category":"method"},{"location":"#Adapt.adapt_structure-Tuple{Any, PiecewiseLinearFunction}","page":"TabularFunctions","title":"Adapt.adapt_structure","text":"adapt_structure(\n    to,\n    f::PiecewiseLinearFunction\n) -> PiecewiseLinearFunction\n\n\n\n\n\n\n","category":"method"},{"location":"#KernelAbstractions.get_backend-Tuple{TabularFunctions.AbstractTabularFunction}","page":"TabularFunctions","title":"KernelAbstractions.get_backend","text":"get_backend(\n    f::TabularFunctions.AbstractTabularFunction\n) -> Any\n\n\n\n\n\n\n","category":"method"},{"location":"#TabularFunctions.@piecewise_analytic-Tuple{Any}","page":"TabularFunctions","title":"TabularFunctions.@piecewise_analytic","text":"Example: Define a function that switches between a linear and quadratic function\n\nfunc = @piecewise_analytic begin\n    0.0, x -> x\n    1.0, x -> x^2\nend\n\nfunc(0.)\n\n# output\n0.0\n\n\n\n\n\n\n","category":"macro"},{"location":"#TabularFunctions.@piecewise_linear-Tuple{Any}","page":"TabularFunctions","title":"TabularFunctions.@piecewise_linear","text":"Example: Define a triangular wave of a single period\n\nfunc = @piecewise_linear begin\n    0.0, 0.0\n    0.5, 1.0\n    1.0, 0.0\nend\n\n\n\n\n\n","category":"macro"}]
}
